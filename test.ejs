<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Interview Test</title>
    <script defer src="/js/face-api.min.js"></script>
    <script defer src="/js/app.js"></script>
    <style>
       body {
      margin: 0;
      padding: 0;
      position: relative;
      height: 100vh;
      width: 100vw;
      overflow: hidden; /* Prevent scrolling */
    }
    video, canvas {
      position: absolute;
      bottom: 0; /* Align to the bottom */
      right: 0; /* Align to the right */
      z-index: 1;
      /* Optional: set fixed dimensions for video and canvas */
      width: 320px; /* Set the width of the video */
      height: 240px; /* Set the height of the video */
    }
    video {
      z-index: 0; /* Place video behind the canvas */
    }
    </style>
    <%- include('./partials/head')  %>
    <link rel="stylesheet" href="/css/questions.css">
    <style>
      

      

        /* Style for the question container */
        .questions-section {
            margin-bottom: 20px;
        }
    </style>
</head>
<body>
    <%- include('./partials/nav') %>
    <div class="container">
        <h1>Interview Questions - <%= domain %> Domain</h1>

        <form id="questionForm" action="/api/interview/submit" method="POST">
            <input type="hidden" name="domain" value="<%= domain %>">
            
            <div class="questions-section">
                <% questions.forEach((question, index) => { %>
                    <div class="question" id="question-<%= index %>" style="display: none;">
                        <h3>Question <%= index + 1 %>: <%= question.question %></h3>
                        <div class="options">
                            <% question.options.forEach(option => { %>
                                <div class="option">
                                    <input type="radio" name="answers[<%= index %>][answer]" value="<%= option %>" required>
                                    <label><%= option %></label>
                                    <input type="hidden" name="answers[<%= index %>][question]" value="<%= question.question %>">
                                    <input type="hidden" name="answers[<%= index %>][domain]" value="<%= domain %>">
                                </div>
                            <% }) %>
                        </div>
                    </div>
                <% }) %>
            </div>

            <div class="navigation-buttons">
                <button type="button" id="prevBtn" onclick="navigate(-1)" style="display: none;">Previous</button>
                <button type="button" id="nextBtn" onclick="navigate(1)">Next</button>
            </div>

            <button type="submit" id="submitBtn" style="display: none;">Submit Answers</button>
        </form>
    </div>

    <!-- Video container for camera -->

        <video id="videoBox" width="720" height="560" autoplay muted></video>
        <canvas id="overlay" width="720" height="560"></canvas>
    

    <script>
        let currentQuestionIndex = 0;
        const totalQuestions = <%= questions.length %>;
        let testStarted = false; // To track if the test has started
        let submitting = false; // To track if the submit button has been clicked

        // Function to show the current question
        function showQuestion(index) {
            document.querySelectorAll('.question').forEach((el, idx) => {
                el.style.display = idx === index ? 'block' : 'none';
            });

            document.getElementById('prevBtn').style.display = index === 0 ? 'none' : 'inline';
            document.getElementById('nextBtn').style.display = index === totalQuestions - 1 ? 'none' : 'inline';
            document.getElementById('submitBtn').style.display = index === totalQuestions - 1 ? 'inline' : 'none';
        }

        // Function to navigate through questions
        function navigate(direction) {
            currentQuestionIndex += direction;
            showQuestion(currentQuestionIndex);
            testStarted = true; // Mark that the test has started when navigating
        }

        // Show the first question initially
        showQuestion(currentQuestionIndex);

        


        // Prevent tab change and provide alert
        document.addEventListener('visibilitychange', function() {
            if (document.visibilityState === 'hidden' && testStarted && !submitting) {
                alert("You are not allowed to change tabs during the test!");
                window.location.reload(); // Optional: Reload the page to return to the test
            }
        });

        // Alert for cheating and prevent reload during the test
        window.addEventListener('beforeunload', function (event) {
            if (testStarted && !submitting) {
                const message = "Warning: Cheating is not tolerated during this test. Are you sure you want to leave?";
                event.preventDefault(); // Prevent the default action
                event.returnValue = message; // Show the confirmation dialog
                return message; // For older browsers
            }
        });

        // Mark submitting when the form is submitted
        document.getElementById('questionForm').onsubmit = function() {
            submitting = true; // Set submitting flag to true
        };

        
    </script>

    <script src="/js/scripts.js"></script>
</body>
</html>
